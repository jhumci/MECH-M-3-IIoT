# Einleitung

Herzlich willkommen zur Lehrveranstaltung __Industrial IoT__! Die folgenden Unterlagen beziehen sich auf die ersten drei synchronen Termine der Vorlesung, welche von Julian Huber durchgef√ºhrt und bewertet werden.

Im Rahmen dieser Abgabe erweitern Sie Ihr Verst√§ndnis f√ºr die Kernkonzepte des Industrial IoT, insbesondere die Erfassung, √úbertragung, Speicherung und Analyse von Sensordaten in Echtzeit sowie deren Verschl√ºsselung und den Umgang mit Konfigurationsdaten.

Im ersten Teil der Vorlesung von Julian Huber, werden wir Grundkonzepte und Technologien des IIoT behandeln und mit einem Mikrocontroller (z.B. Raspberry Pi Pico W) kennenlernen. Im zweiten Teil der Vorlesung von Thomas Konecny, werden die Themen aufgegriffen und mit modernen Operational-Technologien (Beckhoff SPS, AWS-Cloud) vertieft.

::: {.callout-warning}
## Wichtig
Dies ist der erste Durchlauf der Vorlesung. Entsprechend muss sich die Feinabstimmung der Aufgabenstellung und Inhalte noch entwickeln. Feedback und Anregungen sind jederzeit willkommen. Gerne m√ºndlich oder direkt √ºber das GitHub Repository.
:::

## Zusammenarbeit
Die Kommunikation findet √ºber das gemeinsam genutzte [Repository](https://github.com/jhumci/MECH-M-3-IIoT) statt. Im Wiki sind alle relevanten Informationen zu Hintergrund, Aufgabenstellung und Anforderungen zu finden.
F√ºr die assynchrone Kommunikation mit der Lehrveranstaltungsleitung sollen *Issues* und *Pull Requests* im GitHub Repository genutzt werden. Die Abgabe erfolgt √ºber den Link zu einem Fork des Original-Repositories.

## Einsatz von Generativer KI
Es wird davon ausgegangen, dass sowohl in der Wissensermittlung als auch in der Umsetzung generative KI-Tools (z.B. ChatGPT, GitHub Copilot) eingesetzt werden. Dies ist ausdr√ºcklich erlaubt und wird nicht negativ bewertet.

Wichtig ist hierbei, dass Sie **reflektiert** damit umgehen:

### Bei der Wissensermittlung

- Kontext ist entscheidend. Formulieren Sie Ihre Fragen so, dass Sie eine Antwort erhalten, die auf Ihr konkretes Problem zugeschnitten ist. F√ºllen Sie die vorhandenen Input-Token mit Aufgabenbeschreibung, Anforderungen, Rahmenbedingungen, Dokumentationen, Code-Snippets, Fehlermeldungen, etc.
- Fragen sie nicht nach der L√∂sung, sondern nach L√∂sungsoptionen. Lassen Sie sich verschiedene Ans√§tze und deren Vor- und Nachteile aufzeigen.

### Bei der Umsetzung

- Ber√ºcksichtigen Sie, dass ein gro√üer Teil der Trainingsdaten von generativer KI oft einfache Beispiele und keine Teile von komplexen Systemen sind. Wenn Sie nach einer L√∂sung fragen, werden Sie oft bei einfachen L√∂sungen landen, die nicht mit ihrem Projekt mitwachsen k√∂nnen.
- Ber√ºcksichtigen Sie, dass es verschiedene Werkzeuge f√ºr verschiedene Aufgaben gibt. Nutzen Sie die St√§rken der Werkzeuge, aber seien Sie sich auch der Schw√§chen bewusst. Die **Autovervollst√§ndigung von Code** ist oft hilfreich, schafft es aber nicht immer den gesamten Kontext der Systemarchitektur zu verstehen. Nutzen Sie z.B. stattdessen **ChatGPT** um sich einen Vorschlag f√ºr eine Systemarchitektur geben zu lassen und die von ihm erzeugten Ordner und Dateien erkl√§ren zu lassen. F√ºr die Softwareentwicklung gibt es auch Tools, wie **GitHub Copilot im Agent Mode** oder **Gemini CLI**, die zugriff auf das gesamte Repository und ihre Shell haben.


## Bewertungskriterien

Die Arbeit erfolgt in Zweier-Gruppen. Das sich inhaltlich und qualitativ an den Anforderungen orientierende Gesamtkonzept wird bewertet. Dabei werden folgende Kriterien ber√ºcksichtigt:

- Nutzerfreundlichkeit und Dokumentation:
    - Wie einfach ist es f√ºr einen neuen Nutzer, das System einzurichten und zu verwenden?
    - Wie gut ist die Dokumentation? (Klarheit, Vollst√§ndigkeit, Struktur)
    - Funktionieren die bereitgestellten Testf√§lle?
- Implementierungsqualit√§t:
    - Wie gut ist die Qualit√§t des Codes? (Lesbarkeit, Wartbarkeit, Modularit√§t)
    - Wie gut sind die Implementierung der REST-Schnittstelle und die Nutzung der OpenAPI Specification?
    - Wie gut ist die Integration der verschiedenen Komponenten (Firmware, Datenbank, Analyse)
- Implementierungsumfang:
    - Wie gut erf√ºllt die L√∂sung die gestellten Anforderungen?
    - Bei einigen Anforderungen gibt es Abstufungen, die in der Aufgabenstellung beschrieben sind. 

::: {.callout-important}
## Bewertung
Die Bewertung der beiden Teile von IIoT erfolgt unabh√§ngig voneinander. Die Noten (MCI-Punkte) werden anhand der SWS-Verteilung gemittelt. Zum Bestehen sind insgesamt 60% erforderlich.
:::


## Storyline
Sie sind Teil eines Teams, das eine IoT-L√∂sung f√ºr die √úberwachung von Umwelungsbedingungen in einer Produktionsanlage entwickelt. Ihre Aufgabe ist es, eine L√∂sung zu entwerfen und zu implementieren, die Sensordaten erfasst, diese sicher √ºbertr√§gt und in Echtzeit analysiert, um Anomalien zu erkennen und Berichte zu generieren.

<iframe width="800" height="320" src="https://www.youtube.com/embed/e9Jyv7h8mo0" title="MCI | Teaching Factory | Side by side" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

Der Fr√ºhst√ºcksflockenhersteller yourmuesli.at stellt an vielen Produktionsstandorten M√ºlsi-Mischungen her. Der Abfl√ºssprozess wird stark durch Umweltparameter, wie Temperatur und Luftfeuchtigkeit beeinflusst. Um die Qualit√§t der Produkte sicherzustellen, ist eine kontinuierliche √úberwachung dieser Parameter erforderlich. Bisher wurde dies stark vernachl√§ssigt. Zunehmende Probleme, wie nicht mehr knusprige Conflakes, geschmolzene Schokolade und andere Qualit√§tsm√§ngel, sind aufgetreten. Es braucht keine Natural Language Processing und keine Sentiment-Analyse um die negativen Kundenbewertungen zu erkennen:

> ‚Äû@yourmuesli_at, sogts amoi: Solln die Haferflockn im M√ºsli wirklich so latschert sein wia a Regentog in Innsbruck? ü§® Und die Schoko pickt zsamm wia a Lawinabrettl. So schmeckt des nit, gell! #M√ºsliFail‚Äú

> ‚Äû@yourmuesli_at, des Fr√ºchtem√ºsli schmeckt so trocken, i brauch mehr Milch als a ganzes Kalb. üêÑ So kaunst koan Tiroler ned f√ºttern!‚Äú

> ‚Äû@yourmuesli_at, die Portion is so kloan, do werd in Tirol grad amol a Spatzl satt. Mia brauchn a gscheids M√ºsli, nit a Vogelfutter!‚Äú

Das Management hat beschlossen, dass eine schnelle Reaktion erforderlich ist. Bis zum __30.11.2025__ m√∂chte der Leiter der Qualit√§tssicherung Bruno Mircevski die Temperaturwerte aller Produktionsstandorts weltweit auf einem Dashboard auf seinem iPhone sehen.

Da die [_Beckhoff EL3204_](https://www.beckhoff.com/de-at/produkte/i-o/ethercat-klemmen/el3xxx-analog-eingang/el3204.html) zur Zeit eine Lieferzeit von wenigen Wochen haben, kommt es nicht in Frage die bestehende Hardware zu erweitern. Sie und Ihr Team m√ºssen daher eine alternative L√∂sung entwickeln, welche schnell umsetzbar, kosteng√ºnstig und vor allem einfach weltweit zu implementieren und zu warten ist. Das bedeutet, dass sie die L√∂sungen zentral von Innsbruck aus entwickeln und die Hardware versenden k√∂nnen. Vor Ort, soll die Hardware m√∂glichst einfach an die Produktionsanlagen angeschlossen und ggf. konfiguriert werden k√∂nnen. Das soll anhand einer einfachen Doku auch f√ºr technisch nicht sehr versierte Nutzer:innen m√∂glich sein. Zudem sollen Sie auch auf die Ferne dazu in der Lange sein, den Zustand der Sensoren zu √ºberwachen und wenn n√∂tig Einstellungen zu √§ndern.

::: {.callout collapse="true"}
# Aufgabenstellung
Die Probleml√∂sung wird in drei Teile unterteilt, welche jeweils mit einer kurzen synchronen Einheit beginnen. In dieser wird eine kurze Einf√ºhrung in das Thema gegeben und der n√§chste Teil der Aufgabenstellung vorgestellt. F√ºr die asynchronen Einheiten wird Ihnen weiteres Material zum Einarbeiten und Vorbereiten der Aufgabenstellung zur Verf√ºgung gestellt.

## Termin 1: Grundkonzepte
Eine kosteng√ºnstige L√∂sung zur Erfassung und √úbertragung der Sensordaten w√§re z.B. der Einsatz von Microcontroller-Plattformen wie dem Raspberry Pi Pico W oder ESP32, die vor Ort in ein WLan integriert werden k√∂nnen. Hierzu kommen z.B. Raspberry Pi Pico Firmware (mit MicroPython) oder ESP32 mit Arduino in Frage. Als Sensoren k√∂nnen der DHT22 (Temperatur und Luftfeuchtigkeit) oder der DS18B20 (nur Temperatur) eingesetzt werden. Da es schnell gehen soll, wird auf ein eigenes Printed Circuit Board Design verzichtet. Zur Daten√ºbertragung kommen auf Anwendungsschicht z.B. MQTT, HTTP oder FTP in Frage.

## Termin 2: Netzwerke
Da Informationen weltweit ausgetauscht werden m√ºssen, ist der Einsatz von TCP/IP-Protokollen unerl√§sslich. Sie m√ºssen sich Gedanken machen, wie die Netzwerkeinstellungen konfiguriert werden, um eine zuverl√§ssige Kommunikation zwischen den Ger√§ten zu gew√§hrleisten. Zudem werden Sie der IT-Abteilung vor Ort ggf. Anweisungen geben m√ºssen, wie die Firewalls angepasst werden m√ºssen.
Die Firmware der Microcontroller soll zudem eine HTTP-Schnittstelle zur Konfiguration bereitstellen, √ºber den z.B. das Sende-Intervall angepasst werden kann, so dass Sie diese aus der Ferne warten k√∂nnen. Dies ist aber nur m√∂glich, wenn sie sich im gleichen Netzwerk, wie die Mikrocontroller befinden.

## Termin 3: Cloud
Da noch nicht klar ist, wo das Dashboard in Zukunft laufen soll, entwickeln Sie direkt in einem Container. Sie bereiten einen oder mehrere Container vor, in welchen die Datenhaltung und Auswertung erfolgen. Anforderung hier ist, dass ein Container gestartet werden kann, der sowohl die Daten aller verbundener Sensoren speichert als auch die eigenen Daten visualisiert.
:::

