[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Einleitung",
    "section": "",
    "text": "Herzlich willkommen zur Lehrveranstaltung Industrial IoT! Die folgenden Unterlagen beziehen sich auf die ersten drei synchronen Termine der Vorlesung, welche von Julian Huber durchgef√ºhrt und bewertet werden.\nIm Rahmen dieser Abgabe erweitern Sie Ihr Verst√§ndnis f√ºr die Kernkonzepte des Industrial IoT, insbesondere die Erfassung, √úbertragung, Speicherung und Analyse von Sensordaten in Echtzeit sowie deren Verschl√ºsselung und den Umgang mit Konfigurationsdaten.\nIm ersten Teil der Vorlesung von Julian Huber, werden wir Grundkonzepte und Technologien des IIoT behandeln und mit einem Mikrocontroller (z.B. Raspberry Pi Pico W) kennenlernen. Im zweiten Teil der Vorlesung von Thomas Konecny, werden die Themen aufgegriffen und mit modernen Operational-Technologien (Beckhoff SPS, AWS-Cloud) vertieft.\n\n\n\n\n\n\nWichtig\n\n\n\nDies ist der erste Durchlauf der Vorlesung. Entsprechend muss sich die Feinabstimmung der Aufgabenstellung und Inhalte noch entwickeln. Feedback und Anregungen sind jederzeit willkommen. Gerne m√ºndlich oder direkt √ºber das GitHub Repository.\n\n\n\n\nDie Kommunikation findet √ºber das gemeinsam genutzte Repository statt. Im Wiki sind alle relevanten Informationen zu Hintergrund, Aufgabenstellung und Anforderungen zu finden. F√ºr die assynchrone Kommunikation mit der Lehrveranstaltungsleitung sollen Issues und Pull Requests im GitHub Repository genutzt werden. Die Abgabe erfolgt √ºber den Link zu einem Fork des Original-Repositories.\n\n\n\nEs wird davon ausgegangen, dass sowohl in der Wissensermittlung als auch in der Umsetzung generative KI-Tools (z.B. ChatGPT, GitHub Copilot) eingesetzt werden. Dies ist ausdr√ºcklich erlaubt und wird nicht negativ bewertet.\nWichtig ist hierbei, dass Sie reflektiert damit umgehen:\n\n\n\nKontext ist entscheidend. Formulieren Sie Ihre Fragen so, dass Sie eine Antwort erhalten, die auf Ihr konkretes Problem zugeschnitten ist. F√ºllen Sie die vorhandenen Input-Token mit Aufgabenbeschreibung, Anforderungen, Rahmenbedingungen, Dokumentationen, Code-Snippets, Fehlermeldungen, etc.\nFragen sie nicht nach der L√∂sung, sondern nach L√∂sungsoptionen. Lassen Sie sich verschiedene Ans√§tze und deren Vor- und Nachteile aufzeigen.\n\n\n\n\n\nBer√ºcksichtigen Sie, dass ein gro√üer Teil der Trainingsdaten von generativer KI oft einfache Beispiele und keine Teile von komplexen Systemen sind. Wenn Sie nach einer L√∂sung fragen, werden Sie oft bei einfachen L√∂sungen landen, die nicht mit ihrem Projekt mitwachsen k√∂nnen.\nBer√ºcksichtigen Sie, dass es verschiedene Werkzeuge f√ºr verschiedene Aufgaben gibt. Nutzen Sie die St√§rken der Werkzeuge, aber seien Sie sich auch der Schw√§chen bewusst. Die Autovervollst√§ndigung von Code ist oft hilfreich, schafft es aber nicht immer den gesamten Kontext der Systemarchitektur zu verstehen. Nutzen Sie z.B. stattdessen ChatGPT um sich einen Vorschlag f√ºr eine Systemarchitektur geben zu lassen und die von ihm erzeugten Ordner und Dateien erkl√§ren zu lassen. F√ºr die Softwareentwicklung gibt es auch Tools, wie GitHub Copilot im Agent Mode oder Gemini CLI, die zugriff auf das gesamte Repository und ihre Shell haben.\n\n\n\n\n\nDie Arbeit erfolgt in Zweier-Gruppen. Das sich inhaltlich und qualitativ an den Anforderungen orientierende Gesamtkonzept wird bewertet. Dabei werden folgende Kriterien ber√ºcksichtigt:\n\nNutzerfreundlichkeit und Dokumentation:\n\nWie einfach ist es f√ºr einen neuen Nutzer, das System einzurichten und zu verwenden?\nWie gut ist die Dokumentation? (Klarheit, Vollst√§ndigkeit, Struktur)\nFunktionieren die bereitgestellten Testf√§lle?\n\nImplementierungsqualit√§t:\n\nWie gut ist die Qualit√§t des Codes? (Lesbarkeit, Wartbarkeit, Modularit√§t)\nWie gut sind die Implementierung der REST-Schnittstelle und die Nutzung der OpenAPI Specification?\nWie gut ist die Integration der verschiedenen Komponenten (Firmware, Datenbank, Analyse)\n\nImplementierungsumfang:\n\nWie gut erf√ºllt die L√∂sung die gestellten Anforderungen?\nBei einigen Anforderungen gibt es Abstufungen, die in der Aufgabenstellung beschrieben sind.\n\n\n\n\n\n\n\n\nBewertung\n\n\n\nDie Bewertung der beiden Teile von IIoT erfolgt unabh√§ngig voneinander. Die Noten (MCI-Punkte) werden anhand der SWS-Verteilung gemittelt. Zum Bestehen sin ingesamt 60% erforderlich.\n\n\n\n\n\nSie sind Teil eines Teams, das eine IoT-L√∂sung f√ºr die √úberwachung von Umwelungsbedingungen in einer Produktionsanlage entwickelt. Ihre Aufgabe ist es, eine L√∂sung zu entwerfen und zu implementieren, die Sensordaten erfasst, diese sicher √ºbertr√§gt und in Echtzeit analysiert, um Anomalien zu erkennen und Berichte zu generieren.\n\n\nDer Fr√ºhst√ºcksflockenhersteller yourmuesli.at stellt an vielen Produktionsstandorten M√ºlsi-Mischungen her. Der Abfl√ºssprozess wird stark durch Umweltparameter, wie Temperatur und Luftfeuchtigkeit beeinflusst. Um die Qualit√§t der Produkte sicherzustellen, ist eine kontinuierliche √úberwachung dieser Parameter erforderlich. Bisher wurde dies stark vernachl√§ssigt. Zunehmende Probleme, wie nicht mehr knusprige Conflakes, geschmolzene Schokolade und andere Qualit√§tsm√§ngel, sind aufgetreten. Es braucht keine Natural Language Processing und keine Sentiment-Analyse um die negativen Kundenbewertungen zu erkennen:\n\n‚Äû@yourmuesli_at, sogts amoi: Solln die Haferflockn im M√ºsli wirklich so latschert sein wia a Regentog in Innsbruck? ü§® Und die Schoko pickt zsamm wia a Lawinabrettl. So schmeckt des nit, gell! #M√ºsliFail‚Äú\n\n\n‚Äû@yourmuesli_at, des Fr√ºchtem√ºsli schmeckt so trocken, i brauch mehr Milch als a ganzes Kalb. üêÑ So kaunst koan Tiroler ned f√ºttern!‚Äú\n\n\n‚Äû@yourmuesli_at, die Portion is so kloan, do werd in Tirol grad amol a Spatzl satt. Mia brauchn a gscheids M√ºsli, nit a Vogelfutter!‚Äú\n\nDas Management hat beschlossen, dass eine schnelle Reaktion erforderlich ist. Bis zum 30.11.2025 m√∂chte der Leiter der Qualit√§tssicherung Bruno Mircevski die Temperaturwerte aller Produktionsstandorts weltweit auf einem Dashboard auf seinem iPhone sehen.\nDa die Beckhoff EL3204 zur Zeit eine Lieferzeit von wenigen Wochen haben, kommt es nicht in Frage die bestehende Hardware zu erweitern. Sie und Ihr Team m√ºssen daher eine alternative L√∂sung entwickeln, welche schnell umsetzbar, kosteng√ºnstig und vor allem einfach weltweit zu implementieren und zu warten ist. Das bedeutet, dass sie die L√∂sungen zentral von Innsbruck aus entwickeln und die Hardware versenden k√∂nnen. Vor Ort, soll die Hardware m√∂glichst einfach an die Produktionsanlagen angeschlossen und ggf. konfiguriert werden k√∂nnen. Das soll anhand einer einfachen Doku auch f√ºr technisch nicht sehr versierte Nutzer:innen m√∂glich sein. Zudem sollen Sie auch auf die Ferne dazu in der Lange sein, den Zustand der Sensoren zu √ºberwachen und wenn n√∂tig Einstellungen zu √§ndern.\n\n\n\n\n\n\nAufgabenstellung\n\n\n\n\n\nDie Probleml√∂sung wird in drei Teile unterteilt, welche jeweils mit einer kurzen synchronen Einheit beginnen. In dieser wird eine kurze Einf√ºhrung in das Thema gegeben und der n√§chste Teil der Aufgabenstellung vorgestellt. F√ºr die asynchronen Einheiten wird Ihnen weiteres Material zum Einarbeiten und Vorbereiten der Aufgabenstellung zur Verf√ºgung gestellt.\n\n\nEine kosteng√ºnstige L√∂sung zur Erfassung und √úbertragung der Sensordaten w√§re z.B. der Einsatz von Microcontroller-Plattformen wie dem Raspberry Pi Pico W oder ESP32, die vor Ort in ein WLan integriert werden k√∂nnen. Hierzu kommen z.B. Raspberry Pi Pico Firmware (mit MicroPython) oder ESP32 mit Arduino in Frage. Als Sensoren k√∂nnen der DHT22 (Temperatur und Luftfeuchtigkeit) oder der DS18B20 (nur Temperatur) eingesetzt werden. Da es schnell gehen soll, wird auf ein eigenes Printed Circuit Board Design verzichtet. Zur Daten√ºbertragung kommen auf Anwendungsschicht z.B. MQTT, HTTP oder FTP in Frage.\n\n\n\nDa Informationen weltweit ausgetauscht werden m√ºssen, ist der Einsatz von TCP/IP-Protokollen unerl√§sslich. Sie m√ºssen sich Gedanken machen, wie die Netzwerkeinstellungen konfiguriert werden, um eine zuverl√§ssige Kommunikation zwischen den Ger√§ten zu gew√§hrleisten. Zudem werden Sie der IT-Abteilung vor Ort ggf. Anweisungen geben m√ºssen, wie die Firewalls angepasst werden m√ºssen. Die Firmware der Microcontroller soll zudem eine HTTP-Schnittstelle zur Konfiguration bereitstellen, √ºber den z.B. das Sende-Intervall angepasst werden kann, so dass Sie diese aus der Ferne warten k√∂nnen. Dies ist aber nur m√∂glich, wenn sie sich im gleichen Netzwerk, wie die Mikrocontroller befinden.\n\n\n\nDa noch nicht klar ist, wo das Dashboard in Zukunft laufen soll, entwickeln Sie direkt in einem Container. Sie bereiten einen oder mehrere Container vor, in welchen die Datenhaltung und Auswertung erfolgen. Anforderung hier ist, dass ein Container gestartet werden kann, der sowohl die Daten aller verbundener Sensoren speichert als auch die eigenen Daten visualisiert."
  },
  {
    "objectID": "index.html#zusammenarbeit",
    "href": "index.html#zusammenarbeit",
    "title": "Einleitung",
    "section": "",
    "text": "Die Kommunikation findet √ºber das gemeinsam genutzte Repository statt. Im Wiki sind alle relevanten Informationen zu Hintergrund, Aufgabenstellung und Anforderungen zu finden. F√ºr die assynchrone Kommunikation mit der Lehrveranstaltungsleitung sollen Issues und Pull Requests im GitHub Repository genutzt werden. Die Abgabe erfolgt √ºber den Link zu einem Fork des Original-Repositories."
  },
  {
    "objectID": "index.html#einsatz-von-generativer-ki",
    "href": "index.html#einsatz-von-generativer-ki",
    "title": "Einleitung",
    "section": "",
    "text": "Es wird davon ausgegangen, dass sowohl in der Wissensermittlung als auch in der Umsetzung generative KI-Tools (z.B. ChatGPT, GitHub Copilot) eingesetzt werden. Dies ist ausdr√ºcklich erlaubt und wird nicht negativ bewertet.\nWichtig ist hierbei, dass Sie reflektiert damit umgehen:\n\n\n\nKontext ist entscheidend. Formulieren Sie Ihre Fragen so, dass Sie eine Antwort erhalten, die auf Ihr konkretes Problem zugeschnitten ist. F√ºllen Sie die vorhandenen Input-Token mit Aufgabenbeschreibung, Anforderungen, Rahmenbedingungen, Dokumentationen, Code-Snippets, Fehlermeldungen, etc.\nFragen sie nicht nach der L√∂sung, sondern nach L√∂sungsoptionen. Lassen Sie sich verschiedene Ans√§tze und deren Vor- und Nachteile aufzeigen.\n\n\n\n\n\nBer√ºcksichtigen Sie, dass ein gro√üer Teil der Trainingsdaten von generativer KI oft einfache Beispiele und keine Teile von komplexen Systemen sind. Wenn Sie nach einer L√∂sung fragen, werden Sie oft bei einfachen L√∂sungen landen, die nicht mit ihrem Projekt mitwachsen k√∂nnen.\nBer√ºcksichtigen Sie, dass es verschiedene Werkzeuge f√ºr verschiedene Aufgaben gibt. Nutzen Sie die St√§rken der Werkzeuge, aber seien Sie sich auch der Schw√§chen bewusst. Die Autovervollst√§ndigung von Code ist oft hilfreich, schafft es aber nicht immer den gesamten Kontext der Systemarchitektur zu verstehen. Nutzen Sie z.B. stattdessen ChatGPT um sich einen Vorschlag f√ºr eine Systemarchitektur geben zu lassen und die von ihm erzeugten Ordner und Dateien erkl√§ren zu lassen. F√ºr die Softwareentwicklung gibt es auch Tools, wie GitHub Copilot im Agent Mode oder Gemini CLI, die zugriff auf das gesamte Repository und ihre Shell haben."
  },
  {
    "objectID": "index.html#bewertungskriterien",
    "href": "index.html#bewertungskriterien",
    "title": "Einleitung",
    "section": "",
    "text": "Die Arbeit erfolgt in Zweier-Gruppen. Das sich inhaltlich und qualitativ an den Anforderungen orientierende Gesamtkonzept wird bewertet. Dabei werden folgende Kriterien ber√ºcksichtigt:\n\nNutzerfreundlichkeit und Dokumentation:\n\nWie einfach ist es f√ºr einen neuen Nutzer, das System einzurichten und zu verwenden?\nWie gut ist die Dokumentation? (Klarheit, Vollst√§ndigkeit, Struktur)\nFunktionieren die bereitgestellten Testf√§lle?\n\nImplementierungsqualit√§t:\n\nWie gut ist die Qualit√§t des Codes? (Lesbarkeit, Wartbarkeit, Modularit√§t)\nWie gut sind die Implementierung der REST-Schnittstelle und die Nutzung der OpenAPI Specification?\nWie gut ist die Integration der verschiedenen Komponenten (Firmware, Datenbank, Analyse)\n\nImplementierungsumfang:\n\nWie gut erf√ºllt die L√∂sung die gestellten Anforderungen?\nBei einigen Anforderungen gibt es Abstufungen, die in der Aufgabenstellung beschrieben sind.\n\n\n\n\n\n\n\n\nBewertung\n\n\n\nDie Bewertung der beiden Teile von IIoT erfolgt unabh√§ngig voneinander. Die Noten (MCI-Punkte) werden anhand der SWS-Verteilung gemittelt. Zum Bestehen sin ingesamt 60% erforderlich."
  },
  {
    "objectID": "index.html#storyline",
    "href": "index.html#storyline",
    "title": "Einleitung",
    "section": "",
    "text": "Sie sind Teil eines Teams, das eine IoT-L√∂sung f√ºr die √úberwachung von Umwelungsbedingungen in einer Produktionsanlage entwickelt. Ihre Aufgabe ist es, eine L√∂sung zu entwerfen und zu implementieren, die Sensordaten erfasst, diese sicher √ºbertr√§gt und in Echtzeit analysiert, um Anomalien zu erkennen und Berichte zu generieren.\n\n\nDer Fr√ºhst√ºcksflockenhersteller yourmuesli.at stellt an vielen Produktionsstandorten M√ºlsi-Mischungen her. Der Abfl√ºssprozess wird stark durch Umweltparameter, wie Temperatur und Luftfeuchtigkeit beeinflusst. Um die Qualit√§t der Produkte sicherzustellen, ist eine kontinuierliche √úberwachung dieser Parameter erforderlich. Bisher wurde dies stark vernachl√§ssigt. Zunehmende Probleme, wie nicht mehr knusprige Conflakes, geschmolzene Schokolade und andere Qualit√§tsm√§ngel, sind aufgetreten. Es braucht keine Natural Language Processing und keine Sentiment-Analyse um die negativen Kundenbewertungen zu erkennen:\n\n‚Äû@yourmuesli_at, sogts amoi: Solln die Haferflockn im M√ºsli wirklich so latschert sein wia a Regentog in Innsbruck? ü§® Und die Schoko pickt zsamm wia a Lawinabrettl. So schmeckt des nit, gell! #M√ºsliFail‚Äú\n\n\n‚Äû@yourmuesli_at, des Fr√ºchtem√ºsli schmeckt so trocken, i brauch mehr Milch als a ganzes Kalb. üêÑ So kaunst koan Tiroler ned f√ºttern!‚Äú\n\n\n‚Äû@yourmuesli_at, die Portion is so kloan, do werd in Tirol grad amol a Spatzl satt. Mia brauchn a gscheids M√ºsli, nit a Vogelfutter!‚Äú\n\nDas Management hat beschlossen, dass eine schnelle Reaktion erforderlich ist. Bis zum 30.11.2025 m√∂chte der Leiter der Qualit√§tssicherung Bruno Mircevski die Temperaturwerte aller Produktionsstandorts weltweit auf einem Dashboard auf seinem iPhone sehen.\nDa die Beckhoff EL3204 zur Zeit eine Lieferzeit von wenigen Wochen haben, kommt es nicht in Frage die bestehende Hardware zu erweitern. Sie und Ihr Team m√ºssen daher eine alternative L√∂sung entwickeln, welche schnell umsetzbar, kosteng√ºnstig und vor allem einfach weltweit zu implementieren und zu warten ist. Das bedeutet, dass sie die L√∂sungen zentral von Innsbruck aus entwickeln und die Hardware versenden k√∂nnen. Vor Ort, soll die Hardware m√∂glichst einfach an die Produktionsanlagen angeschlossen und ggf. konfiguriert werden k√∂nnen. Das soll anhand einer einfachen Doku auch f√ºr technisch nicht sehr versierte Nutzer:innen m√∂glich sein. Zudem sollen Sie auch auf die Ferne dazu in der Lange sein, den Zustand der Sensoren zu √ºberwachen und wenn n√∂tig Einstellungen zu √§ndern.\n\n\n\n\n\n\nAufgabenstellung\n\n\n\n\n\nDie Probleml√∂sung wird in drei Teile unterteilt, welche jeweils mit einer kurzen synchronen Einheit beginnen. In dieser wird eine kurze Einf√ºhrung in das Thema gegeben und der n√§chste Teil der Aufgabenstellung vorgestellt. F√ºr die asynchronen Einheiten wird Ihnen weiteres Material zum Einarbeiten und Vorbereiten der Aufgabenstellung zur Verf√ºgung gestellt.\n\n\nEine kosteng√ºnstige L√∂sung zur Erfassung und √úbertragung der Sensordaten w√§re z.B. der Einsatz von Microcontroller-Plattformen wie dem Raspberry Pi Pico W oder ESP32, die vor Ort in ein WLan integriert werden k√∂nnen. Hierzu kommen z.B. Raspberry Pi Pico Firmware (mit MicroPython) oder ESP32 mit Arduino in Frage. Als Sensoren k√∂nnen der DHT22 (Temperatur und Luftfeuchtigkeit) oder der DS18B20 (nur Temperatur) eingesetzt werden. Da es schnell gehen soll, wird auf ein eigenes Printed Circuit Board Design verzichtet. Zur Daten√ºbertragung kommen auf Anwendungsschicht z.B. MQTT, HTTP oder FTP in Frage.\n\n\n\nDa Informationen weltweit ausgetauscht werden m√ºssen, ist der Einsatz von TCP/IP-Protokollen unerl√§sslich. Sie m√ºssen sich Gedanken machen, wie die Netzwerkeinstellungen konfiguriert werden, um eine zuverl√§ssige Kommunikation zwischen den Ger√§ten zu gew√§hrleisten. Zudem werden Sie der IT-Abteilung vor Ort ggf. Anweisungen geben m√ºssen, wie die Firewalls angepasst werden m√ºssen. Die Firmware der Microcontroller soll zudem eine HTTP-Schnittstelle zur Konfiguration bereitstellen, √ºber den z.B. das Sende-Intervall angepasst werden kann, so dass Sie diese aus der Ferne warten k√∂nnen. Dies ist aber nur m√∂glich, wenn sie sich im gleichen Netzwerk, wie die Mikrocontroller befinden.\n\n\n\nDa noch nicht klar ist, wo das Dashboard in Zukunft laufen soll, entwickeln Sie direkt in einem Container. Sie bereiten einen oder mehrere Container vor, in welchen die Datenhaltung und Auswertung erfolgen. Anforderung hier ist, dass ein Container gestartet werden kann, der sowohl die Daten aller verbundener Sensoren speichert als auch die eigenen Daten visualisiert."
  },
  {
    "objectID": "index.html#termin-1-grundkonzepte",
    "href": "index.html#termin-1-grundkonzepte",
    "title": "Einleitung",
    "section": "",
    "text": "Eine kosteng√ºnstige L√∂sung zur Erfassung und √úbertragung der Sensordaten w√§re z.B. der Einsatz von Microcontroller-Plattformen wie dem Raspberry Pi Pico W oder ESP32, die vor Ort in ein WLan integriert werden k√∂nnen. Hierzu kommen z.B. Raspberry Pi Pico Firmware (mit MicroPython) oder ESP32 mit Arduino in Frage. Als Sensoren k√∂nnen der DHT22 (Temperatur und Luftfeuchtigkeit) oder der DS18B20 (nur Temperatur) eingesetzt werden. Da es schnell gehen soll, wird auf ein eigenes Printed Circuit Board Design verzichtet. Zur Daten√ºbertragung kommen auf Anwendungsschicht z.B. MQTT, HTTP oder FTP in Frage."
  },
  {
    "objectID": "index.html#termin-2-netzwerke",
    "href": "index.html#termin-2-netzwerke",
    "title": "Einleitung",
    "section": "",
    "text": "Da Informationen weltweit ausgetauscht werden m√ºssen, ist der Einsatz von TCP/IP-Protokollen unerl√§sslich. Sie m√ºssen sich Gedanken machen, wie die Netzwerkeinstellungen konfiguriert werden, um eine zuverl√§ssige Kommunikation zwischen den Ger√§ten zu gew√§hrleisten. Zudem werden Sie der IT-Abteilung vor Ort ggf. Anweisungen geben m√ºssen, wie die Firewalls angepasst werden m√ºssen. Die Firmware der Microcontroller soll zudem eine HTTP-Schnittstelle zur Konfiguration bereitstellen, √ºber den z.B. das Sende-Intervall angepasst werden kann, so dass Sie diese aus der Ferne warten k√∂nnen. Dies ist aber nur m√∂glich, wenn sie sich im gleichen Netzwerk, wie die Mikrocontroller befinden."
  },
  {
    "objectID": "index.html#termin-3-cloud",
    "href": "index.html#termin-3-cloud",
    "title": "Einleitung",
    "section": "",
    "text": "Da noch nicht klar ist, wo das Dashboard in Zukunft laufen soll, entwickeln Sie direkt in einem Container. Sie bereiten einen oder mehrere Container vor, in welchen die Datenhaltung und Auswertung erfolgen. Anforderung hier ist, dass ein Container gestartet werden kann, der sowohl die Daten aller verbundener Sensoren speichert als auch die eigenen Daten visualisiert."
  },
  {
    "objectID": "docs/Materialien.html",
    "href": "docs/Materialien.html",
    "title": "Materialen",
    "section": "",
    "text": "Materialen\nSie erhalten in der ersten Sitzung die folgenden Materialien ausgeh√§ndigt:\n\nRaspberry Pi Pico W\nTemperatursensor\nKabel\nUSB-Micro-B-Kabel (bei Bedarf)\n\nBitte geben Sie diese nach Ende des Semesters unaufgefordert zur√ºck, erst dann wird die Note freigegeben.\nDer Einsatz anderer Hardware kann mit der Lehrveranstaltungsleitung abgesprochen werden."
  },
  {
    "objectID": "docs/Termin_3_Cloud.html",
    "href": "docs/Termin_3_Cloud.html",
    "title": "Synchron",
    "section": "",
    "text": "Cloud Computing und Virtualisierung\nSecurity und Safety\n\n\n\n\nSie bereiten eine containerisierte L√∂sung vor, die sowohl eine Datenbank (z.B. InfluxDB, SQLite, Arrow etc.) als auch eine Visualisierungskomponente (z.B. Grafana, etc.) beinhaltet. Bei der Auswahl der Technologien sind Sie frei, achten Sie jedoch darauf, dass die L√∂sung ressourcenschonend ist und auf einem typischen Laptop ausgef√ºhrt werden kann.\nDie L√∂sung soll so gestaltet sein, dass sie mit minimalen Aufwand gestartet werden kann (z.B. √ºber ein docker-compose.yml Datei).\nDie L√∂sung soll die Daten aller verbundenen Sensoren speichern und auch offen f√ºr zuk√ºnftige Sensoren sein und diese ohne zus√§tzlichen Konfigurationsaufwand integrieren.\nNeben der Visualisierung der Zeitreihen-Daten, soll die L√∂sung auch eine √ºbersicht √ºber die verbundenen Sensoren bieten (z.B. Anzahl der Sensoren, letzte Verbindung, etc.).\nBearbeiten sie die Dokumentation so auf, dass ein Nutzer die Anpassung der Config den Mikrocontroller in ein bestehendes WLAN einbinden kann und die kontainersierte L√∂sung starten und nutzen kann."
  },
  {
    "objectID": "docs/Termin_3_Cloud.html#vorstellung-der-aufgabenstellung",
    "href": "docs/Termin_3_Cloud.html#vorstellung-der-aufgabenstellung",
    "title": "Synchron",
    "section": "",
    "text": "Sie bereiten eine containerisierte L√∂sung vor, die sowohl eine Datenbank (z.B. InfluxDB, SQLite, Arrow etc.) als auch eine Visualisierungskomponente (z.B. Grafana, etc.) beinhaltet. Bei der Auswahl der Technologien sind Sie frei, achten Sie jedoch darauf, dass die L√∂sung ressourcenschonend ist und auf einem typischen Laptop ausgef√ºhrt werden kann.\nDie L√∂sung soll so gestaltet sein, dass sie mit minimalen Aufwand gestartet werden kann (z.B. √ºber ein docker-compose.yml Datei).\nDie L√∂sung soll die Daten aller verbundenen Sensoren speichern und auch offen f√ºr zuk√ºnftige Sensoren sein und diese ohne zus√§tzlichen Konfigurationsaufwand integrieren.\nNeben der Visualisierung der Zeitreihen-Daten, soll die L√∂sung auch eine √ºbersicht √ºber die verbundenen Sensoren bieten (z.B. Anzahl der Sensoren, letzte Verbindung, etc.).\nBearbeiten sie die Dokumentation so auf, dass ein Nutzer die Anpassung der Config den Mikrocontroller in ein bestehendes WLAN einbinden kann und die kontainersierte L√∂sung starten und nutzen kann."
  },
  {
    "objectID": "docs/Termin_2_Netzwerke.html",
    "href": "docs/Termin_2_Netzwerke.html",
    "title": "Synchron",
    "section": "",
    "text": "Die Netzwerkkonfiguration (z.B. WLAN-Zugangsdaten) wird √ºber eine Konfig-Datei settings.toml bereitgestellt, die der Microcontroller beim Start einliest.\nDer Microcontroller hat zwei HTTP-Endpunkte (unverschl√ºsselt):\n\n/config (GET, POST): Zum Abrufen und Setzen der Konfiguration (z.B. Sendeintervall).\n/status (GET): Zum Abrufen des aktuellen Status des Ger√§ts (z.B. letzte gesendeten Werte, Verbindungsstatus, Uptime).\n\nEinigen sie sich in der Gesamtgruppe auf die HTTP-API, welche alle Sensoren unterst√ºtzen m√ºssen und legen Sie alles fest bis vor dem 3. Synchron-Termin.\nDie Schnittstellen sind in der OpenAPI Specification dokumentiert siehe openapi.yaml und conventions.md.\nEs stehen Testf√§lle zur Verf√ºgung, um die Funktionalit√§t der HTTP-API zu √ºberpr√ºfen. Ob Sie diese Testf√§lle mittels eines Test-Frameworks hat Auswirkung auf die Bewertung: (z.B. REST Client in VSCode (befriedigend)), unittest in Python (gut),oder das OpenAPI-Tooling (z.B. Swagger Codegen) nutzen (sehr gut), bleibt Ihnen √ºberlassen. Wie die Testf√§lle genutzt werden, sollte in der Dokumentation beschrieben sein.\nGehen Sie davon aus, dass die an allen Standorten Zugriff auf ein WLan haben, welches durch eine externe Firewall gesch√ºtzt ist (Whitelist). Schreiben Sie ein kurzen Absatz f√ºr Ihre Dokumentation, worauf die √∂rtliche IT-Abteilung achten muss, wenn sie ihre Ger√§te in das Netzwerk integrieren damit die Daten auch wirklich beim MQTT-Broker ankommen. Diskutieren Sie auch, wie sie die HTTP-API aus der Ferne zug√§nglich machen k√∂nnen und welche Gefahren und Hindernisse bestehen."
  },
  {
    "objectID": "docs/Termin_2_Netzwerke.html#vorstellung-der-aufgabenstellung",
    "href": "docs/Termin_2_Netzwerke.html#vorstellung-der-aufgabenstellung",
    "title": "Synchron",
    "section": "",
    "text": "Die Netzwerkkonfiguration (z.B. WLAN-Zugangsdaten) wird √ºber eine Konfig-Datei settings.toml bereitgestellt, die der Microcontroller beim Start einliest.\nDer Microcontroller hat zwei HTTP-Endpunkte (unverschl√ºsselt):\n\n/config (GET, POST): Zum Abrufen und Setzen der Konfiguration (z.B. Sendeintervall).\n/status (GET): Zum Abrufen des aktuellen Status des Ger√§ts (z.B. letzte gesendeten Werte, Verbindungsstatus, Uptime).\n\nEinigen sie sich in der Gesamtgruppe auf die HTTP-API, welche alle Sensoren unterst√ºtzen m√ºssen und legen Sie alles fest bis vor dem 3. Synchron-Termin.\nDie Schnittstellen sind in der OpenAPI Specification dokumentiert siehe openapi.yaml und conventions.md.\nEs stehen Testf√§lle zur Verf√ºgung, um die Funktionalit√§t der HTTP-API zu √ºberpr√ºfen. Ob Sie diese Testf√§lle mittels eines Test-Frameworks hat Auswirkung auf die Bewertung: (z.B. REST Client in VSCode (befriedigend)), unittest in Python (gut),oder das OpenAPI-Tooling (z.B. Swagger Codegen) nutzen (sehr gut), bleibt Ihnen √ºberlassen. Wie die Testf√§lle genutzt werden, sollte in der Dokumentation beschrieben sein.\nGehen Sie davon aus, dass die an allen Standorten Zugriff auf ein WLan haben, welches durch eine externe Firewall gesch√ºtzt ist (Whitelist). Schreiben Sie ein kurzen Absatz f√ºr Ihre Dokumentation, worauf die √∂rtliche IT-Abteilung achten muss, wenn sie ihre Ger√§te in das Netzwerk integrieren damit die Daten auch wirklich beim MQTT-Broker ankommen. Diskutieren Sie auch, wie sie die HTTP-API aus der Ferne zug√§nglich machen k√∂nnen und welche Gefahren und Hindernisse bestehen."
  },
  {
    "objectID": "docs/Termin_1_Grundkonzepte_IoT.html",
    "href": "docs/Termin_1_Grundkonzepte_IoT.html",
    "title": "Synchron",
    "section": "",
    "text": "Jede Gruppe entwickelt mit einem eigenen Microcontroller und Sensor.\nErstellen Sie einen Fork von diesem Git-Repository und laden Sie jhumci ein\nVerbinden Sie den Sensor mit dem Microcontroller und lesen Sie die Sensordaten indem Sie die code.py anpassen. F√ºr den ersten Schritt k√∂nnen sie auch ein einfaches Skript ohne konfigurationsdatei schreiben.\nImplementieren Sie eine L√∂sung, die die Spezifikation in den Dateien conventions.md und asyncapi.yaml erf√ºllt.\n√úberpr√ºfen Sie mittels MQTT Explorer ob Ihre MQTT-Nachrichten korrekt gesendet und empfangen werden.\nRefactoren Sie Ihren Code, um die Lesbarkeit und Wartbarkeit zu verbessern. Legen Sie dazu eine Konfigurationsdatei settings.toml an und definieren Sie sinnvoller Klassen in ihrer Firmware."
  },
  {
    "objectID": "docs/Termin_1_Grundkonzepte_IoT.html#vorstellung-der-aufgabenstellung",
    "href": "docs/Termin_1_Grundkonzepte_IoT.html#vorstellung-der-aufgabenstellung",
    "title": "Synchron",
    "section": "",
    "text": "Jede Gruppe entwickelt mit einem eigenen Microcontroller und Sensor.\nErstellen Sie einen Fork von diesem Git-Repository und laden Sie jhumci ein\nVerbinden Sie den Sensor mit dem Microcontroller und lesen Sie die Sensordaten indem Sie die code.py anpassen. F√ºr den ersten Schritt k√∂nnen sie auch ein einfaches Skript ohne konfigurationsdatei schreiben.\nImplementieren Sie eine L√∂sung, die die Spezifikation in den Dateien conventions.md und asyncapi.yaml erf√ºllt.\n√úberpr√ºfen Sie mittels MQTT Explorer ob Ihre MQTT-Nachrichten korrekt gesendet und empfangen werden.\nRefactoren Sie Ihren Code, um die Lesbarkeit und Wartbarkeit zu verbessern. Legen Sie dazu eine Konfigurationsdatei settings.toml an und definieren Sie sinnvoller Klassen in ihrer Firmware."
  },
  {
    "objectID": "docs/Dokumentation.html",
    "href": "docs/Dokumentation.html",
    "title": "Dokumentation",
    "section": "",
    "text": "Hinweis\n\n\n\nHier ist Platz f√ºr ihre Dokumentation. Dieses Dokument ist in Quarto geschrieben und wird automatisch in HTML umgewandelt. Da Quarto ein Superset von Markdown ist, k√∂nnen Sie einfach wie gewohnt arbeiten aber auch weitere Funktionen nutzen. Zudem ist ein Strukturvorschlag gegeben, dieser muss aber nicht unbedingt eingehalten werden. Wichtig ist, dass die Dokumentation klar und verst√§ndlich ist und die relevanten Files auch als Link eingebunden werden.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDas repository ist als pdm-Projekt strukturiert. Nutzen Sie pdm install, um die Abh√§ngigkeiten zu installieren.\nF√ºr Dokumentation wurde Quarto verwendet, die quarto-cli-Befehle sind ebenfalls in der pdm-Umgebung verf√ºgbar.\n\nF√ºhren Sie quarto preview im docs-Verzeichnis aus, um die Dokumentation lokal zu starten.\nZudem existiert eine github-action zur automatischen Erstellung der Dokumentation, die diese auch automatisch als Website bereitstellt, wenn Sie in den Main-Branch pushen. Wenn sie diese entfernen wollen, m√ºssen sie die Datei .github/workflows/publish.yml anpassen.\n\n\n\n\n\ndocs/: Quarto Dokumentation\ndocs/iot-specs: Spezifikationen f√ºr IoT-Ger√§te\ndocs/images: Bilder f√ºr die Dokumentation\nsrc/esp32_firmware: Quellcode mit Ans√§tzen f√ºr die Firmware-Entwicklung\nsrc/raspi_firmware: Quellcode mit Ans√§tzen f√ºr die Firmware-Entwicklung\nsrc/cloud: Quellcode mit Ans√§tzen f√ºr die Cloud-Entwicklung\ntests/: Tests f√ºr den Quellcode"
  },
  {
    "objectID": "docs/Dokumentation.html#anleitung-f√ºr-developer",
    "href": "docs/Dokumentation.html#anleitung-f√ºr-developer",
    "title": "Dokumentation",
    "section": "",
    "text": "Das repository ist als pdm-Projekt strukturiert. Nutzen Sie pdm install, um die Abh√§ngigkeiten zu installieren.\nF√ºr Dokumentation wurde Quarto verwendet, die quarto-cli-Befehle sind ebenfalls in der pdm-Umgebung verf√ºgbar.\n\nF√ºhren Sie quarto preview im docs-Verzeichnis aus, um die Dokumentation lokal zu starten.\nZudem existiert eine github-action zur automatischen Erstellung der Dokumentation, die diese auch automatisch als Website bereitstellt, wenn Sie in den Main-Branch pushen. Wenn sie diese entfernen wollen, m√ºssen sie die Datei .github/workflows/publish.yml anpassen.\n\n\n\n\n\ndocs/: Quarto Dokumentation\ndocs/iot-specs: Spezifikationen f√ºr IoT-Ger√§te\ndocs/images: Bilder f√ºr die Dokumentation\nsrc/esp32_firmware: Quellcode mit Ans√§tzen f√ºr die Firmware-Entwicklung\nsrc/raspi_firmware: Quellcode mit Ans√§tzen f√ºr die Firmware-Entwicklung\nsrc/cloud: Quellcode mit Ans√§tzen f√ºr die Cloud-Entwicklung\ntests/: Tests f√ºr den Quellcode"
  },
  {
    "objectID": "docs/iot-specs/conventions.html",
    "href": "docs/iot-specs/conventions.html",
    "title": "MQTT & Daten-Konventionen",
    "section": "",
    "text": "Struktur: iiot/group/{nachname1-nachname2-nachname3}/sensor/temperature/state\nNur Kleinbuchstaben und / als Trenner\nBeispiel: iiot/group/mustermann-meier-schmidt/sensor/temperature/state\n\n\n\n\n\nStandardformat: JSON\nZeitstempel immer in UTC, ISO8601 (2025-08-28T10:00:00Z)\nEinheit als String (z. B. \"¬∞C\")\nStatuswerte: ok, error, offline\n\n\n\n\n\nPort: 1883\nUsername: bobm\nPassword: In Vorlesung erfragen\nSSL/TLS: False\nClient-ID: Nach eigener Konfiguration\nMQTT-Version: 5.0"
  },
  {
    "objectID": "docs/iot-specs/conventions.html#topics",
    "href": "docs/iot-specs/conventions.html#topics",
    "title": "MQTT & Daten-Konventionen",
    "section": "",
    "text": "Struktur: iiot/group/{nachname1-nachname2-nachname3}/sensor/temperature/state\nNur Kleinbuchstaben und / als Trenner\nBeispiel: iiot/group/mustermann-meier-schmidt/sensor/temperature/state"
  },
  {
    "objectID": "docs/iot-specs/conventions.html#payload",
    "href": "docs/iot-specs/conventions.html#payload",
    "title": "MQTT & Daten-Konventionen",
    "section": "",
    "text": "Standardformat: JSON\nZeitstempel immer in UTC, ISO8601 (2025-08-28T10:00:00Z)\nEinheit als String (z. B. \"¬∞C\")\nStatuswerte: ok, error, offline"
  },
  {
    "objectID": "docs/iot-specs/conventions.html#endpunkt",
    "href": "docs/iot-specs/conventions.html#endpunkt",
    "title": "MQTT & Daten-Konventionen",
    "section": "",
    "text": "Port: 1883\nUsername: bobm\nPassword: In Vorlesung erfragen\nSSL/TLS: False\nClient-ID: Nach eigener Konfiguration\nMQTT-Version: 5.0"
  },
  {
    "objectID": "docs/iot-specs/conventions.html#endpunkte",
    "href": "docs/iot-specs/conventions.html#endpunkte",
    "title": "MQTT & Daten-Konventionen",
    "section": "Endpunkte",
    "text": "Endpunkte\n\n/config\n\nGET: Gibt aktuelle Konfiguration zur√ºck.\nPOST: Setzt neue Konfiguration.\n\n\n\nBeispiel GET /config Response\n```json { ‚ÄúsendInterval‚Äù: 60, ‚ÄúdeviceName‚Äù: ‚Äúsensor-node-01‚Äù }"
  }
]