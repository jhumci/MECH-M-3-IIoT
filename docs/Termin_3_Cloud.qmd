# Synchron

- [Cloud Computing und Virtualisierung](https://jhumci.github.io/2023_WiSe_IoT2/IoT_7_Cloud/#)
- [Security und Safety](https://jhumci.github.io/2023_WiSe_IoT2/IoT_6_SecuritySafety/)

## Vorstellung der Aufgabenstellung

- [ ] Sie bereiten eine containerisierte Lösung vor, die sowohl eine Datenbank (z.B. InfluxDB, SQLite, Arrow etc.) als auch eine Visualisierungskomponente (z.B. Grafana, etc.) beinhaltet. Bei der Auswahl der Technologien sind Sie frei, achten Sie jedoch darauf, dass die Lösung ressourcenschonend ist und auf einem typischen Laptop ausgeführt werden kann.
- [ ] Die Lösung soll so gestaltet sein, dass sie mit minimalen Aufwand gestartet werden kann (z.B. über ein `docker-compose.yml` Datei).
- [ ] Die Lösung soll die Daten aller verbundenen Sensoren speichern und auch offen für zukünftige Sensoren sein und diese ohne zusätzlichen Konfigurationsaufwand integrieren.
- [ ] Neben der Visualisierung der Zeitreihen-Daten, soll die Lösung auch eine übersicht über die verbundenen Sensoren bieten (z.B. Anzahl der Sensoren, letzte Verbindung, etc.).
- [ ] Bearbeiten sie die Dokumentation so auf, dass ein Nutzer die Anpassung der Config den Mikrocontroller in ein bestehendes WLAN einbinden kann und die kontainersierte Lösung starten und nutzen kann.

# Assynchrone Inhalte

Mit folgenden Inhalten sollten Sie sich vertraut machen, um die Aufgabenstellung erfolgreich zu bearbeiten:

- [DuckDB](https://duckdb.org/): Leichtgewichtige Datenbank für Zeitreihenhaden
- [InfluxDB](https://www.influxdata.com/products/influxdb-overview/): Zeitseriendatenbank
    - [telegraf](https://www.influxdata.com/time-series-platform/telegraf/): Vermittlung zwischen MQTT und InfluxDB
    - [Grafana](https://grafana.com/): Visualisierung von Zeitseriendaten
- [Apache NiFi](https://nifi.apache.org/): Apache NiFi
- [node-red](https://nodered.org/): Low-Code-Entwicklungsumgebung für die Vernetzung von IoT-Geräten
- [Docker](https://www.docker.com/): Containerisierungstechnologie
